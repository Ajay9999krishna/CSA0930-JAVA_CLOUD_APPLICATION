class ArmstrongThread extends Thread {
    public void run() {
        System.out.println("Thread T1: Armstrong numbers");
        for (int i = 0; i <= 1000; i++) {
            if (isArmstrong(i)) {
                System.out.println("Armstrong number: " + i);
            }
        }
        System.out.println("Thread T1: Completed");
    }

    private boolean isArmstrong(int num) {
        int originalNum, remainder, result = 0, n = 0;

        originalNum = num;

        while (originalNum != 0) {
            originalNum /= 10;
            ++n;
        }

        originalNum = num;

        while (originalNum != 0) {
            remainder = originalNum % 10;
            result += Math.pow(remainder, n);
            originalNum /= 10;
        }

        return result == num;
    }
}

class FibonacciThread extends Thread {
    public void run() {
        System.out.println("Thread T2: Fibonacci series");
        int n = 10, t1 = 0, t2 = 1;
        System.out.print("Fibonacci series: ");
        for (int i = 1; i <= n; ++i) {
            System.out.print(t1 + " + ");
            int sum = t1 + t2;
            t1 = t2;
            t2 = sum;
        }
        System.out.println("\nThread T2: Completed");
    }
}

public class ThreadLifecycleDemo {
    public static void main(String[] args) {
        ArmstrongThread t1 = new ArmstrongThread();
        FibonacciThread t2 = new FibonacciThread();

        System.out.println("Main thread starts");

        t1.start();
        t2.start();

        System.out.println("Main thread ends");
    }
}
